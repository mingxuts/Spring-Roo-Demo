// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.paperuni.demo.model;

import com.paperuni.demo.model.TdOrder;
import com.paperuni.demo.model.TdOrderDataOnDemand;
import com.paperuni.demo.model.TdOrderRepository;
import com.paperuni.demo.model.TdSubject;
import com.paperuni.demo.model.TdSubjectDataOnDemand;
import com.paperuni.demo.model.TdTaskDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TdOrderDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TdOrderDataOnDemand: @Component;
    
    private Random TdOrderDataOnDemand.rnd = new SecureRandom();
    
    private List<TdOrder> TdOrderDataOnDemand.data;
    
    @Autowired
    TdSubjectDataOnDemand TdOrderDataOnDemand.tdSubjectDataOnDemand;
    
    @Autowired
    TdTaskDataOnDemand TdOrderDataOnDemand.tdTaskDataOnDemand;
    
    @Autowired
    TdOrderRepository TdOrderDataOnDemand.tdOrderRepository;
    
    public TdOrder TdOrderDataOnDemand.getNewTransientTdOrder(int index) {
        TdOrder obj = new TdOrder();
        setCoupon(obj, index);
        setCourseLevel(obj, index);
        setCreateDate(obj, index);
        setCustomerId(obj, index);
        setDeadLine(obj, index);
        setFile(obj, index);
        setFileContentType(obj, index);
        setFileName(obj, index);
        setFileSize(obj, index);
        setFormat(obj, index);
        setIncludeFigure(obj, index);
        setNote(obj, index);
        setOrderStatus(obj, index);
        setReferencing(obj, index);
        setSourcesCount(obj, index);
        setStartDate(obj, index);
        setSubjectId(obj, index);
        setWordCount(obj, index);
        return obj;
    }
    
    public void TdOrderDataOnDemand.setCoupon(TdOrder obj, int index) {
        String coupon = "coupon_" + index;
        if (coupon.length() > 35) {
            coupon = coupon.substring(0, 35);
        }
        obj.setCoupon(coupon);
    }
    
    public void TdOrderDataOnDemand.setCourseLevel(TdOrder obj, int index) {
        String courseLevel = "courseLevel_" + index;
        if (courseLevel.length() > 35) {
            courseLevel = courseLevel.substring(0, 35);
        }
        obj.setCourseLevel(courseLevel);
    }
    
    public void TdOrderDataOnDemand.setCreateDate(TdOrder obj, int index) {
        Calendar createDate = Calendar.getInstance();
        obj.setCreateDate(createDate);
    }
    
    public void TdOrderDataOnDemand.setCustomerId(TdOrder obj, int index) {
        Integer customerId = new Integer(index);
        obj.setCustomerId(customerId);
    }
    
    public void TdOrderDataOnDemand.setDeadLine(TdOrder obj, int index) {
        Calendar deadLine = Calendar.getInstance();
        obj.setDeadLine(deadLine);
    }
    
    public void TdOrderDataOnDemand.setFile(TdOrder obj, int index) {
        byte[] file = String.valueOf(index).getBytes();
        obj.setFile(file);
    }
    
    public void TdOrderDataOnDemand.setFileContentType(TdOrder obj, int index) {
        String fileContentType = "fileContentType_" + index;
        if (fileContentType.length() > 50) {
            fileContentType = fileContentType.substring(0, 50);
        }
        obj.setFileContentType(fileContentType);
    }
    
    public void TdOrderDataOnDemand.setFileName(TdOrder obj, int index) {
        String fileName = "fileName_" + index;
        if (fileName.length() > 70) {
            fileName = fileName.substring(0, 70);
        }
        obj.setFileName(fileName);
    }
    
    public void TdOrderDataOnDemand.setFileSize(TdOrder obj, int index) {
        Integer fileSize = new Integer(index);
        obj.setFileSize(fileSize);
    }
    
    public void TdOrderDataOnDemand.setFormat(TdOrder obj, int index) {
        String format = "format_" + index;
        if (format.length() > 30) {
            format = format.substring(0, 30);
        }
        obj.setFormat(format);
    }
    
    public void TdOrderDataOnDemand.setIncludeFigure(TdOrder obj, int index) {
        String includeFigure = "includeFigure_" + index;
        if (includeFigure.length() > 30) {
            includeFigure = includeFigure.substring(0, 30);
        }
        obj.setIncludeFigure(includeFigure);
    }
    
    public void TdOrderDataOnDemand.setNote(TdOrder obj, int index) {
        String note = "note_" + index;
        if (note.length() > 255) {
            note = note.substring(0, 255);
        }
        obj.setNote(note);
    }
    
    public void TdOrderDataOnDemand.setOrderStatus(TdOrder obj, int index) {
        String orderStatus = "orderStatus_" + index;
        if (orderStatus.length() > 45) {
            orderStatus = orderStatus.substring(0, 45);
        }
        obj.setOrderStatus(orderStatus);
    }
    
    public void TdOrderDataOnDemand.setReferencing(TdOrder obj, int index) {
        String referencing = "referencing_" + index;
        if (referencing.length() > 30) {
            referencing = referencing.substring(0, 30);
        }
        obj.setReferencing(referencing);
    }
    
    public void TdOrderDataOnDemand.setSourcesCount(TdOrder obj, int index) {
        Short sourcesCount = new Integer(index).shortValue();
        obj.setSourcesCount(sourcesCount);
    }
    
    public void TdOrderDataOnDemand.setStartDate(TdOrder obj, int index) {
        Calendar startDate = Calendar.getInstance();
        obj.setStartDate(startDate);
    }
    
    public void TdOrderDataOnDemand.setSubjectId(TdOrder obj, int index) {
        TdSubject subjectId = tdSubjectDataOnDemand.getRandomTdSubject();
        obj.setSubjectId(subjectId);
    }
    
    public void TdOrderDataOnDemand.setWordCount(TdOrder obj, int index) {
        Integer wordCount = new Integer(index);
        obj.setWordCount(wordCount);
    }
    
    public TdOrder TdOrderDataOnDemand.getSpecificTdOrder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TdOrder obj = data.get(index);
        Integer id = obj.getId();
        return tdOrderRepository.findOne(id);
    }
    
    public TdOrder TdOrderDataOnDemand.getRandomTdOrder() {
        init();
        TdOrder obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return tdOrderRepository.findOne(id);
    }
    
    public boolean TdOrderDataOnDemand.modifyTdOrder(TdOrder obj) {
        return false;
    }
    
    public void TdOrderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = tdOrderRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TdOrder' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TdOrder>();
        for (int i = 0; i < 10; i++) {
            TdOrder obj = getNewTransientTdOrder(i);
            try {
                tdOrderRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            tdOrderRepository.flush();
            data.add(obj);
        }
    }
    
}
