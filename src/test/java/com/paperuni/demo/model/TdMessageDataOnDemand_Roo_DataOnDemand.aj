// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.paperuni.demo.model;

import com.paperuni.demo.model.TdMessage;
import com.paperuni.demo.model.TdMessageDataOnDemand;
import com.paperuni.demo.model.TdMessagePK;
import com.paperuni.demo.model.TdMessageRepository;
import com.paperuni.demo.model.TdTask;
import com.paperuni.demo.model.TdTaskDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TdMessageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TdMessageDataOnDemand: @Component;
    
    private Random TdMessageDataOnDemand.rnd = new SecureRandom();
    
    private List<TdMessage> TdMessageDataOnDemand.data;
    
    @Autowired
    TdTaskDataOnDemand TdMessageDataOnDemand.tdTaskDataOnDemand;
    
    @Autowired
    TdMessageRepository TdMessageDataOnDemand.tdMessageRepository;
    
    public TdMessage TdMessageDataOnDemand.getNewTransientTdMessage(int index) {
        TdMessage obj = new TdMessage();
        setEmbeddedIdClass(obj, index);
        setBody(obj, index);
        setCreateDate(obj, index);
        setFile(obj, index);
        setFileContentType(obj, index);
        setHasRead(obj, index);
        setHasReview(obj, index);
        setLink(obj, index);
        setSource(obj, index);
        setTaskId(obj, index);
        return obj;
    }
    
    public void TdMessageDataOnDemand.setEmbeddedIdClass(TdMessage obj, int index) {
        Integer id = new Integer(index);
        Integer taskId = new Integer(index);
        
        TdMessagePK embeddedIdClass = new TdMessagePK(id, taskId);
        obj.setId(embeddedIdClass);
    }
    
    public void TdMessageDataOnDemand.setBody(TdMessage obj, int index) {
        String body = "body_" + index;
        if (body.length() > 255) {
            body = body.substring(0, 255);
        }
        obj.setBody(body);
    }
    
    public void TdMessageDataOnDemand.setCreateDate(TdMessage obj, int index) {
        Calendar createDate = Calendar.getInstance();
        obj.setCreateDate(createDate);
    }
    
    public void TdMessageDataOnDemand.setFile(TdMessage obj, int index) {
        byte[] file = String.valueOf(index).getBytes();
        obj.setFile(file);
    }
    
    public void TdMessageDataOnDemand.setFileContentType(TdMessage obj, int index) {
        String fileContentType = "fileContentType_" + index;
        if (fileContentType.length() > 50) {
            fileContentType = fileContentType.substring(0, 50);
        }
        obj.setFileContentType(fileContentType);
    }
    
    public void TdMessageDataOnDemand.setHasRead(TdMessage obj, int index) {
        Boolean hasRead = Boolean.TRUE;
        obj.setHasRead(hasRead);
    }
    
    public void TdMessageDataOnDemand.setHasReview(TdMessage obj, int index) {
        Boolean hasReview = Boolean.TRUE;
        obj.setHasReview(hasReview);
    }
    
    public void TdMessageDataOnDemand.setLink(TdMessage obj, int index) {
        String link = "link_" + index;
        if (link.length() > 255) {
            link = link.substring(0, 255);
        }
        obj.setLink(link);
    }
    
    public void TdMessageDataOnDemand.setSource(TdMessage obj, int index) {
        String source = "s" + index;
        if (source.length() > 2) {
            source = source.substring(0, 2);
        }
        obj.setSource(source);
    }
    
    public void TdMessageDataOnDemand.setTaskId(TdMessage obj, int index) {
        TdTask taskId = tdTaskDataOnDemand.getRandomTdTask();
        obj.setTaskId(taskId);
    }
    
    public TdMessage TdMessageDataOnDemand.getSpecificTdMessage(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TdMessage obj = data.get(index);
        TdMessagePK id = obj.getId();
        return tdMessageRepository.findOne(id);
    }
    
    public TdMessage TdMessageDataOnDemand.getRandomTdMessage() {
        init();
        TdMessage obj = data.get(rnd.nextInt(data.size()));
        TdMessagePK id = obj.getId();
        return tdMessageRepository.findOne(id);
    }
    
    public boolean TdMessageDataOnDemand.modifyTdMessage(TdMessage obj) {
        return false;
    }
    
    public void TdMessageDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = tdMessageRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TdMessage' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TdMessage>();
        for (int i = 0; i < 10; i++) {
            TdMessage obj = getNewTransientTdMessage(i);
            try {
                tdMessageRepository.save(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            tdMessageRepository.flush();
            data.add(obj);
        }
    }
    
}
